%% Created on Sat Jul 19 2025 
%% author: Amit Jaiswal @ MEGIN Oy, Espoo, Finland <amit.jaiswal@megin.fi>
%%
%% Usage: FieldTrip code for EEG data preprocessing
%% Note:  The script was written for EEG workshop 24-26 July, 2025 @ IIT Mandi, India.
%% 
%% Add fieldtrip in path
clc
clear all
restoredefaultpath
prnt_dir = '//home//amit3//pCloudDrive//';
ft_dir   = [prnt_dir, 'Scripts//TPTools//fieldtrip//'];
addpath(ft_dir)
ft_defaults
addpath('functions/')
ver

%% Set data directory and other parameters
data_dir = [prnt_dir, 'Workshop_IITMandi/'];
filename = [data_dir, 'sample_audvis_raw_eeg.fif'];

par            = [];
par.bpfreq     = [1 45];
par.cov_cut    = [2, 98]; 

%% Browse/review raw data
cfg          = [];
cfg.viewmode = 'vertical';
cfg.blocksize= 5;
cfg.dataset  = filename;
cfg.preproc.demean   = 'yes';
artf = ft_databrowser(cfg);

%% set stimulus parameters and bad channels
par.stimchan  = 'STI 014';
% par.trialwin  = [-0.500 0.500];
par.badch     = {'EEG 053'};

%% Label event categories
keyset={'AEF-L', 'AEF-R', 'VEF-L', 'VEF-R', 'smiley face', 'button press'};
valueset=[1, 2, 3, 4, 5, 32];
evdict=containers.Map(keyset, valueset);

%% Define trials
cfg                     = [];       
cfg.dataset             = filename;   
cfg.channel             = 'EEG*';
cfg.trialdef.eventtype  = par.stimchan;  
cfg.trialdef.eventvalue = valueset;      
cfg.trialdef.prestim    = 0.5;      
cfg.trialdef.poststim   = 0.5;     
trldef = ft_definetrial(cfg);      

%% Visualize events triggers 
ft_plot_events(trldef, keyset, valueset)

%% Read the continuous data 
cfg            = [];
cfg.continuous = 'yes';
cfg.channel    = 'all';
cfg.dataset    = filename;
raw       = ft_preprocessing(cfg);
disp(raw)

% Remove if any NaN
raw.trial{:}(isnan(raw.trial{:})) = 0; 
sfreq = raw.hdr.Fs;

%% Prepare layout and neighbours
cfg = [];
cfg.elec    = raw.elec;
cfg.channel = {'EEG*'};
lay2D = ft_prepare_layout(cfg, raw);

cfg.method   = 'triangulation';
cfg.layout   = lay2D;
cfg.feedback = 'yes';
% cfg.grad     = raw.elec;
neighbours = ft_prepare_neighbours(cfg, raw);
rotate3d

%% Preprocess continuous raw data
cfg = [];
% cfg.demean     = 'yes';
cfg.detrend    = 'yes';
cfg.bpfilter   = 'yes'; 
cfg.bpfiltord  = 2;
cfg.bpfilttype = 'but';
cfg.bpfreq     = par.bpfreq;
% cfg.reref      = 'yes';
% cfg.refchannel = 'all';
% cfg.refmethod  = 'avg';
cfg.channel    = {'EEG*'};
rawfilt_eeg  = ft_preprocessing(cfg, raw);
cfg.channel   = {'EEG*', 'EOG*', 'ECG*'};
rawfilt_eegbio = ft_preprocessing(cfg, raw);

%% Review
cfg = [];
cfg.viewmode  = 'vertical';
cfg.blocksize = 5;
ft_databrowser(cfg, rawfilt_eegbio);

% cfg.detrend         = 'yes';
% cfg.bpfilter        = 'yes'; 
% cfg.bpfilttype      = 'but';
% cfg.bpfreq          = par.bpfreq; 
% cfg.coilaccuracy    = 1;
% raw2 = ft_preprocessing(cfg, raw);
% 
% cfg.bsfilter='yes';
% cfg.bsfreq = [49 50];
% data = ft_preprocessing(cfg, data);

%% Reconstruct bad channels
cfg = [];
cfg.senstype   = 'eeg';
cfg.method     = 'spline'; 
cfg.badchannel = par.badch; 
cfg.neighbours = neighbours;
rawfilt_eeg_interp = ft_channelrepair(cfg, rawfilt_eeg);

%% Review 
cfg = [];
cfg.viewmode  = 'vertical';
cfg.blocksize = 5;
ft_databrowser(cfg, rawfilt_eeg_interp);

%% Average re-reference.
cfg = [];
cfg.reref      = 'yes';
cfg.refchannel = 'all';
cfg.refmethod  = 'avg';
rawfilt_eeg_interp  = ft_preprocessing(cfg, rawfilt_eeg_interp);

%% 
% addpath([ft_dir 'forward/'])
n_ic = 30;
                    
% % Downsample Data
% cd([ft_dir 'utilities/private//'])
cfg = []; 
cfg.resamplefs = max(128, sfreq/2); % 250
cfg.feedback   = 'gui';
cfg.detrend    = 'no'; 
data_ds = ft_resampledata(cfg, rawfilt_eeg_interp);
                    
% % Just avoid the filter edge artifact for fitting the ICA
% cfg = [];
% cfg.trials = 'all';
% cfg.toilim = [data_ds.time{1}(1)+2, data_ds.time{1}(end)-2];
% data_ds = ft_redefinetrial(cfg, data_ds);

% Run ICA on downsampled data
cfg              = [];
cfg.method       = 'runica'; %%, 'fastica', 'binica', 'pca', 'svd', 'jader', 'varimax', 'dss', 'cca', 'sobi', 'white' or 'csp' (default = 'runica')
cfg.channel      = 'all';  
cfg.trials       = 'all';   
cfg.numcomponent = n_ic;   
cfg.updatesens   = 'yes';    % or 'yes' (default = 'yes')
cfg.feedback     = 'gui';    %, 'text', 'textbar', 'gui' (default = 'text')
comp_ds = ft_componentanalysis(cfg, data_ds);
% % save([data_path mfname '-ica_comp.mat'],'comp','-v7.3')
% comp_ds.trial{:}(isnan(comp_ds.trial{:})) = 0; % remove any possible NaN

% % Visualize Components
% if isequal(par.system, 'Biopac')
%     comp_ds.label = data_ds.label(1:min(length(comp_ds.label), length(data_ds.label))); % Hmmm, wrong but just to avoid the error
% end
cfg           = []; 
cfg.viewmode  = 'component'; 
cfg.layout    = lay2D;
cfg.blocksize = 10;
ft_databrowser(cfg, comp_ds)

% Decompose the original data 
cfg           = [];
cfg.topolabel = comp_ds.topolabel;
cfg.unmixing  = comp_ds.unmixing;
comp          = ft_componentanalysis(cfg, rawfilt_eeg_interp);
% comp.trial{:}(isnan(comp.trial{:})) = 0; % remove any possible NaN

% cfg = [];
% cfg.component = 1:length(comp.label);   
% cfg.layout    = lay2D;
% cfg.comment   = 'no';
% figure, ft_topoplotIC(cfg, comp)
                    
% % linear correlation between 10-100 seconds
% for ii=1:length(comp.label)
%     data_comp_corr(ii) = abs(corr(data_ds.trial{1}(1,10*data_ds.fsample:100*data_ds.fsample)',...
%                                   comp_ds.trial{1}(ii,10*data_ds.fsample:100*data_ds.fsample)')); 
% end
% 
% eog_ic_idx = find(data_comp_corr > 0.75);
automated = [];
manual    = input('Enter the indices of the bad components (in []):');
% Reject components from original data and reconstruct the cleaned data
%  rejcomp = input('List the components to remove (in the form [1 2 3]).. \n');
cfg           = [];
cfg.component = union(automated, manual);
raw_clean    = ft_rejectcomponent(cfg, comp, rawfilt_eeg_interp);
% Save the clean data
% save([data_path mfname '_icaed_data_clean.mat'],'data_clean','-v7.3')
% diary off
data_clean.elec = data.elec;
data_clean.layout = lay_sys;

%% Segment the data
cfg     = [];
cfg.trl = cfgg.trl(:,:); 
data = ft_redefinetrial(cfg, data);

%% Interactive data browser 
if par.more_plots
    cfg            = [];
    cfg.channel    = megchan;
    cfg.demean     = 'yes';
    cfg.continuous = 'no';
    cfg.viewmode   = 'butterfly';
    ft_databrowser(cfg, data);
end
